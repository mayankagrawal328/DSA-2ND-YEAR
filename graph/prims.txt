package com.prims;

import java.util.ArrayList;
import java.util.PriorityQueue;

public class Graph {

	ArrayList<Edge>[] list;
	@SuppressWarnings("unchecked")
	Graph(int v){
		list = new ArrayList[v];
		for (int i = 0; i < list.length; i++) {
			list[i] = new ArrayList<Edge>();
			
		}
	}
	
	public void insert(int s,int d, int w) {
		list[s].add(new Edge(s, d, w));
		list[d].add(new Edge(d, s, w));
	}
	
	
	public void createGraph() {
		insert(0, 2, 1);
		insert(0, 1, 4);
		insert(0, 3, 5);
		insert(2, 3, 2);
		insert(2, 4, 8);
		insert(3, 1, 2);
		insert(3, 4, 1);
		insert(1, 4, 3);
		insert(1, 5, 3);
		insert(4, 5, 4);
		
	}
	
	
	public void display() {
		for (ArrayList<Edge> arrayList : list) {
			System.out.println(arrayList);
		}
	}
	
	public void prims() {
		PriorityQueue<Edge> pq = new PriorityQueue<>();
		boolean[] isvisited =  new boolean[list.length];
		int cost = 0;
		pq.offer(new Edge(0, 0, 0));
		while (!pq.isEmpty()) {
			Edge e = pq.poll();
			if (isvisited[e.dest] == false) {
				isvisited[e.dest] = true;
				cost = cost+e.weight;
				System.out.println(e);
				for (Edge t : list[e.dest]) {
					pq.offer(t);
				}
			}
		}
		System.out.println(cost);
	}
	
	public static void main(String[] args) {
		
Graph g = new Graph(6);
g.createGraph();
//g.display();

//PriorityQueue<Edge> pq = new PriorityQueue<>();
//pq.offer(new Edge(0, 1, 2));
//pq.offer(new Edge(1, 1, 4));
//
//System.out.println(pq.peek());

g.prims();

	}

}
